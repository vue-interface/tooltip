{"version":3,"file":"tooltip.umd.cjs","sources":["../src/Tooltip.vue","../src/TooltipPlugin.ts"],"sourcesContent":["<script lang=\"ts\" setup>\nimport { Instance, Offsets, OptionsGeneric, createPopper } from '@popperjs/core';\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref } from 'vue';\n\nconst props = defineProps<{\n    offset?: Offsets,\n    popper?: OptionsGeneric<unknown>,\n    placement?: string,\n    target: Element,\n    title?: string,\n    show?: boolean,\n    top?: boolean,\n    bottom?: boolean,\n    left?: boolean,\n    right?: boolean\n}>();\n\nconst el = ref<HTMLElement>();\nconst arrow = ref<HTMLElement>();\nconst currentShow = ref(false);\nconst popperInstance = ref<Instance>();\n\nconst computedPlacement = computed(() => {\n    if(props.placement) {\n        return props.placement;\n    }\n\n    if(props.bottom) {\n        return 'bottom';\n    }\n\n    if(props.left) {\n        return 'left';\n    }\n\n    if(props.right) {\n        return 'right';\n    }\n\n    return 'top';\n});\n\nconst tooltipClasses = computed(() => {\n    return {\n        show: currentShow,\n        [`bs-tooltip-${computedPlacement.value}`]: true\n    };\n});\n\nfunction open() {\n    currentShow.value = true;\n}\n\nfunction close() {\n    currentShow.value = false;\n}\n\ndefineExpose({\n    open, close\n});\n\nonMounted(() => {\n    if(!el.value) {\n        return;\n    }\n\n    popperInstance.value = createPopper(props.target, el.value, Object.assign({\n        placement: computedPlacement.value,\n        modifiers: [\n            {\n                name: 'offset',\n                options: {\n                    offset: [props.offset?.x ?? 0, props.offset?.y ?? 6]\n                },\n            },\n            {\n                name: 'arrow',\n                options: {\n                    element: arrow.value,\n                },\n            },\n        ],\n    }, props.popper));\n\n    nextTick(() => {\n        currentShow.value = props.show;\n    });\n});\n\nonBeforeUnmount(()=> {\n    popperInstance.value && popperInstance.value.destroy();\n});\n</script>\n\n<template>\n    <div\n        ref=\"el\"\n        class=\"tooltip\"\n        :class=\"tooltipClasses\"\n        role=\"tooltip\">\n        <div\n            ref=\"arrow\"\n            class=\"tooltip-arrow\" />\n        <div\n            ref=\"inner\"\n            class=\"tooltip-inner\">\n            <slot>{{ title }}</slot>\n        </div>\n    </div>\n</template>\n\n<style>\n.tooltip:not(.show) {\n    z-index: -1;\n}\n</style>","import type { App } from 'vue';\nimport { h, render } from 'vue';\nimport Tooltip from './Tooltip.vue';\n\ntype TooltipPluginOptions = {\n    delay?: number,\n    prefix: string,\n    progressiveEnhancement: boolean,\n    triggers: {\n        open: string[],\n        close: string[],\n    }\n}\n\nexport default function (app: App, opts: Partial<TooltipPluginOptions> = {}) {\n    const tooltips: Map<string,Function> = new Map;\n\n    const options: TooltipPluginOptions = Object.assign({\n        delay: undefined,\n        prefix: 'data-tooltip',\n        progressiveEnhancement: true,\n        triggers: {\n            open: ['mouseover:350'],\n            close: ['mouseout:100'],\n        }\n    }, opts);\n    \n    const prefix = options.prefix.replace(/[-]+$/, '');\n    const prefixRegExp = new RegExp(`^${prefix}\\-`);\n\n    function getAttributes(el: Element): Record<string,string> {\n        return Array.from(el.attributes)\n            .map(a => [a.name, a.value])\n            .filter(([key]) => key === 'title' || key.match(prefixRegExp))\n            .map(([key, value]) => [key.replace(new RegExp(prefixRegExp), ''), value])\n            .reduce((carry, attr) => Object.assign(carry, { [attr[0]]: attr[1] }), {});\n    }\n\n    function createTooltip(target: Element, props: Record<string,string> = {}, hash: string): Function {\n        const container = document.createElement('template');\n        \n        const vnode = h(Tooltip, Object.assign({\n            target,\n            show: true\n        }, props));\n    \n        render(vnode, container);\n    \n        const [el] = [...container.children];\n    \n        document.body.append(el);\n    \n        return () => {\n            tooltips.delete(hash);\n\n            // @ts-ignore\n            vnode.component?.ctx.close();\n    \n            // @todo: Make the animation rate (150) dynamic. Should get value \n            // from the CSS transition duration.\n            setTimeout(() => el.remove(), 150);\n        };\n    }\n\n    function destroyTooltip(target: Element) {\n        const id = target.getAttribute(`${prefix}-id`);\n        if(id) {\n            const tooltip = tooltips.get(id);\n            tooltip?.();\n        }\n    }\n\n    function init(target: Element, props = {}) {\n        const properties: Record<string,string> = Object.assign({\n            title: target.getAttribute(prefix) || target.getAttribute('title')\n        }, props, getAttributes(target));\n\n        // If the properties don't have a title, ignore this target.\n        if(!properties.title || target.hasAttribute(`${prefix}-id`)) {\n            return;\n        }\n\n        // Create a unique \"hash\" to show the node has been initialized.\n        // This prevents double initializing on the same element.\n        const hash = Math.random().toString(36).slice(2, 7);\n        \n        // Create the instance vars.\n        let tooltip: Function|null, timer: number;\n\n        //target.setAttribute(prefix, properties.title);\n        target.setAttribute(`${prefix}-id`, hash);\n        target.removeAttribute('title');\n\n        function open(delay = 0) {\n            clearTimeout(timer);\n\n            if(!tooltip) {\n                timer = setTimeout(() => {\n                    // Do a check before creating the tooltip to ensure the dom\n                    // element still exists. Its possible for the element to\n                    // be removed after the timeout delay runs.\n                    if(document.contains(target)) {\n                        tooltip = createTooltip(target, properties, hash);\n                        tooltips.set(hash, tooltip);\n                    }\n                }, delay);\n            }\n        }\n\n        function close(delay = 0) {\n            clearTimeout(timer);\n\n            if(tooltip) {\n                timer = setTimeout(() => {\n                    tooltip && tooltip();\n                    tooltip = null;\n                }, delay);\n            }\n        }\n\n        function addEventListener(trigger: string, fn: Function) {\n            const [ event, delayString ] = trigger.split(':');\n\n            target.addEventListener(event, () => fn(Number(delayString || 0)));\n        }\n\n        (target.getAttribute(`${prefix}-trigger-open`)?.split(',') || options.triggers.open)\n            .map(trigger => addEventListener(trigger, open));\n            \n        (target.getAttribute(`${prefix}-trigger-close`)?.split(',') || options.triggers.close)\n            .map(trigger => addEventListener(trigger, close));\n    }\n  \n    app.mixin({\n        mounted() {\n            if(!options.progressiveEnhancement) {\n                return;\n            }\n            \n            let el = this.$el;\n\n            if(this.$el instanceof Text) {\n                el = this.$el.parentNode;\n            }\n\n            if(el instanceof HTMLElement) {\n                init(el);\n            }\n\n            // Create the tree walker.\n            const walker = document.createTreeWalker(\n                el,\n                NodeFilter.SHOW_ALL,\n                (node: Node) => {\n                    if(!(node instanceof Element)) {\n                        return NodeFilter.FILTER_REJECT;\n                    }\n                    \n                    return NodeFilter.FILTER_ACCEPT;\n                }\n            );\n\n            // Step through and alert all child nodes\n            while(walker.nextNode()) {\n                if(walker.currentNode instanceof Element) {\n                    init(<Element> walker.currentNode);\n                }\n            }\n\n            const observer = new MutationObserver((changes) => {\n\n                let tooltipFound = false;\n                for(const { removedNodes } of changes) {\n                    for(const node of removedNodes) {\n                        if(!(node instanceof Element)) {\n                            continue;\n                        }\n                        for(const el of node.querySelectorAll(`[${prefix}-id]`)) {\n                            const tooltip = tooltips.get(\n                                el.getAttribute(`${prefix}-id`) as string\n                            );\n                            if(tooltip) {\n                                tooltipFound = true;\n                                tooltip();\n                            }\n                        }\n                    } \n                }\n\n                // @experimental\n                // In some cases in Inertia.js, not all tooltips are removed on certain actions.\n                // remove all tooltips if no tooltip was found.\n                if(!tooltipFound) {\n                    for(const tooltip of tooltips.values()) {\n                        tooltip();\n                    }\n                }\n            });\n\n            observer.observe(el, { childList: true });\n        },\n    });\n\n    app.directive('tooltip', {\n        beforeMount(target, binding) {\n            init(target, Object.assign({}, binding.modifiers, binding.value));\n        },\n        beforeUnmount(target) {\n            destroyTooltip(target);\n        }\n    });\n}"],"names":["el","ref","arrow","currentShow","popperInstance","computedPlacement","computed","props","tooltipClasses","open","close","__expose","onMounted","createPopper","_a","_b","nextTick","onBeforeUnmount","TooltipPlugin","app","opts","tooltips","options","prefix","prefixRegExp","getAttributes","a","key","value","carry","attr","createTooltip","target","hash","container","vnode","h","Tooltip","render","destroyTooltip","id","tooltip","init","properties","timer","delay","addEventListener","trigger","fn","event","delayString","walker","node","changes","tooltipFound","removedNodes","binding"],"mappings":"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"}